// Code generated by protoc-gen-go. DO NOT EDIT.
// source: exam.proto

package exampledata

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Span struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Span) Reset()         { *m = Span{} }
func (m *Span) String() string { return proto.CompactTextString(m) }
func (*Span) ProtoMessage()    {}
func (*Span) Descriptor() ([]byte, []int) {
	return fileDescriptor_exam_8ba43417e4b875f0, []int{0}
}
func (m *Span) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Span.Unmarshal(m, b)
}
func (m *Span) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Span.Marshal(b, m, deterministic)
}
func (dst *Span) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Span.Merge(dst, src)
}
func (m *Span) XXX_Size() int {
	return xxx_messageInfo_Span.Size(m)
}
func (m *Span) XXX_DiscardUnknown() {
	xxx_messageInfo_Span.DiscardUnknown(m)
}

var xxx_messageInfo_Span proto.InternalMessageInfo

func (m *Span) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Transfer struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Transfer) Reset()         { *m = Transfer{} }
func (m *Transfer) String() string { return proto.CompactTextString(m) }
func (*Transfer) ProtoMessage()    {}
func (*Transfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_exam_8ba43417e4b875f0, []int{1}
}
func (m *Transfer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transfer.Unmarshal(m, b)
}
func (m *Transfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transfer.Marshal(b, m, deterministic)
}
func (dst *Transfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transfer.Merge(dst, src)
}
func (m *Transfer) XXX_Size() int {
	return xxx_messageInfo_Transfer.Size(m)
}
func (m *Transfer) XXX_DiscardUnknown() {
	xxx_messageInfo_Transfer.DiscardUnknown(m)
}

var xxx_messageInfo_Transfer proto.InternalMessageInfo

func (m *Transfer) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Span)(nil), "exampledata.Span")
	proto.RegisterType((*Transfer)(nil), "exampledata.Transfer")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InterviewClient is the client API for Interview service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InterviewClient interface {
	Visit(ctx context.Context, in *Span, opts ...grpc.CallOption) (*Transfer, error)
}

type interviewClient struct {
	cc *grpc.ClientConn
}

func NewInterviewClient(cc *grpc.ClientConn) InterviewClient {
	return &interviewClient{cc}
}

func (c *interviewClient) Visit(ctx context.Context, in *Span, opts ...grpc.CallOption) (*Transfer, error) {
	out := new(Transfer)
	err := c.cc.Invoke(ctx, "/exampledata.Interview/visit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterviewServer is the server API for Interview service.
type InterviewServer interface {
	Visit(context.Context, *Span) (*Transfer, error)
}

func RegisterInterviewServer(s *grpc.Server, srv InterviewServer) {
	s.RegisterService(&_Interview_serviceDesc, srv)
}

func _Interview_Visit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Span)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterviewServer).Visit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exampledata.Interview/Visit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterviewServer).Visit(ctx, req.(*Span))
	}
	return interceptor(ctx, in, info, handler)
}

var _Interview_serviceDesc = grpc.ServiceDesc{
	ServiceName: "exampledata.Interview",
	HandlerType: (*InterviewServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "visit",
			Handler:    _Interview_Visit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exam.proto",
}

func init() { proto.RegisterFile("exam.proto", fileDescriptor_exam_8ba43417e4b875f0) }

var fileDescriptor_exam_8ba43417e4b875f0 = []byte{
	// 141 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0xad, 0x48, 0xcc,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x06, 0xb1, 0x0b, 0x72, 0x52, 0x53, 0x12, 0x4b,
	0x12, 0x95, 0xa4, 0xb8, 0x58, 0x82, 0x0b, 0x12, 0xf3, 0x84, 0x84, 0xb8, 0x58, 0xf2, 0x12, 0x73,
	0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x25, 0x15, 0x2e, 0x8e, 0x90, 0xa2,
	0xc4, 0xbc, 0xe2, 0xb4, 0xd4, 0x22, 0x21, 0x09, 0x2e, 0xf6, 0xdc, 0xd4, 0xe2, 0xe2, 0xc4, 0x74,
	0x98, 0x12, 0x18, 0xd7, 0xc8, 0x81, 0x8b, 0xd3, 0x33, 0xaf, 0x24, 0xb5, 0xa8, 0x2c, 0x33, 0xb5,
	0x5c, 0xc8, 0x98, 0x8b, 0xb5, 0x2c, 0xb3, 0x38, 0xb3, 0x44, 0x48, 0x50, 0x0f, 0xc9, 0x16, 0x3d,
	0x90, 0x15, 0x52, 0xa2, 0x28, 0x42, 0x30, 0x93, 0x95, 0x18, 0x92, 0xd8, 0xc0, 0xee, 0x32, 0x06,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x66, 0xcd, 0x12, 0xd1, 0xa5, 0x00, 0x00, 0x00,
}
